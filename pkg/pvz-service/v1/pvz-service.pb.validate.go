// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: pvz-service/v1/pvz-service.proto

package pvz

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on AcceptOrderDeliveryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AcceptOrderDeliveryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AcceptOrderDeliveryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AcceptOrderDeliveryRequestMultiError, or nil if none found.
func (m *AcceptOrderDeliveryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AcceptOrderDeliveryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetOrderId()); l < 1 || l > 36 {
		err := AcceptOrderDeliveryRequestValidationError{
			field:  "OrderId",
			reason: "value length must be between 1 and 36 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetRecipientId()); l < 1 || l > 36 {
		err := AcceptOrderDeliveryRequestValidationError{
			field:  "RecipientId",
			reason: "value length must be between 1 and 36 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetStorageTime() < 0 {
		err := AcceptOrderDeliveryRequestValidationError{
			field:  "StorageTime",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetCost() < 0 {
		err := AcceptOrderDeliveryRequestValidationError{
			field:  "Cost",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetWeight() < 0 {
		err := AcceptOrderDeliveryRequestValidationError{
			field:  "Weight",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Packaging

	// no validation rules for AdditionalFilm

	if len(errors) > 0 {
		return AcceptOrderDeliveryRequestMultiError(errors)
	}

	return nil
}

// AcceptOrderDeliveryRequestMultiError is an error wrapping multiple
// validation errors returned by AcceptOrderDeliveryRequest.ValidateAll() if
// the designated constraints aren't met.
type AcceptOrderDeliveryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AcceptOrderDeliveryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AcceptOrderDeliveryRequestMultiError) AllErrors() []error { return m }

// AcceptOrderDeliveryRequestValidationError is the validation error returned
// by AcceptOrderDeliveryRequest.Validate if the designated constraints aren't met.
type AcceptOrderDeliveryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AcceptOrderDeliveryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AcceptOrderDeliveryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AcceptOrderDeliveryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AcceptOrderDeliveryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AcceptOrderDeliveryRequestValidationError) ErrorName() string {
	return "AcceptOrderDeliveryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AcceptOrderDeliveryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAcceptOrderDeliveryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AcceptOrderDeliveryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AcceptOrderDeliveryRequestValidationError{}

// Validate checks the field values on ReturnOrderDeliveryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReturnOrderDeliveryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReturnOrderDeliveryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReturnOrderDeliveryRequestMultiError, or nil if none found.
func (m *ReturnOrderDeliveryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ReturnOrderDeliveryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetOrderId()); l < 1 || l > 36 {
		err := ReturnOrderDeliveryRequestValidationError{
			field:  "OrderId",
			reason: "value length must be between 1 and 36 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ReturnOrderDeliveryRequestMultiError(errors)
	}

	return nil
}

// ReturnOrderDeliveryRequestMultiError is an error wrapping multiple
// validation errors returned by ReturnOrderDeliveryRequest.ValidateAll() if
// the designated constraints aren't met.
type ReturnOrderDeliveryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReturnOrderDeliveryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReturnOrderDeliveryRequestMultiError) AllErrors() []error { return m }

// ReturnOrderDeliveryRequestValidationError is the validation error returned
// by ReturnOrderDeliveryRequest.Validate if the designated constraints aren't met.
type ReturnOrderDeliveryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReturnOrderDeliveryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReturnOrderDeliveryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReturnOrderDeliveryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReturnOrderDeliveryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReturnOrderDeliveryRequestValidationError) ErrorName() string {
	return "ReturnOrderDeliveryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReturnOrderDeliveryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReturnOrderDeliveryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReturnOrderDeliveryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReturnOrderDeliveryRequestValidationError{}

// Validate checks the field values on GiveOrderToClientRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GiveOrderToClientRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GiveOrderToClientRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GiveOrderToClientRequestMultiError, or nil if none found.
func (m *GiveOrderToClientRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GiveOrderToClientRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetOrderIds()) < 1 {
		err := GiveOrderToClientRequestValidationError{
			field:  "OrderIds",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetOrderIds() {
		_, _ = idx, item

		if l := utf8.RuneCountInString(item); l < 1 || l > 36 {
			err := GiveOrderToClientRequestValidationError{
				field:  fmt.Sprintf("OrderIds[%v]", idx),
				reason: "value length must be between 1 and 36 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return GiveOrderToClientRequestMultiError(errors)
	}

	return nil
}

// GiveOrderToClientRequestMultiError is an error wrapping multiple validation
// errors returned by GiveOrderToClientRequest.ValidateAll() if the designated
// constraints aren't met.
type GiveOrderToClientRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GiveOrderToClientRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GiveOrderToClientRequestMultiError) AllErrors() []error { return m }

// GiveOrderToClientRequestValidationError is the validation error returned by
// GiveOrderToClientRequest.Validate if the designated constraints aren't met.
type GiveOrderToClientRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GiveOrderToClientRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GiveOrderToClientRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GiveOrderToClientRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GiveOrderToClientRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GiveOrderToClientRequestValidationError) ErrorName() string {
	return "GiveOrderToClientRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GiveOrderToClientRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGiveOrderToClientRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GiveOrderToClientRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GiveOrderToClientRequestValidationError{}

// Validate checks the field values on GetOrdersRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetOrdersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrdersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOrdersRequestMultiError, or nil if none found.
func (m *GetOrdersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrdersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetUserId()); l < 1 || l > 36 {
		err := GetOrdersRequestValidationError{
			field:  "UserId",
			reason: "value length must be between 1 and 36 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.LastN != nil {

		if m.GetLastN() < 0 {
			err := GetOrdersRequestValidationError{
				field:  "LastN",
				reason: "value must be greater than or equal to 0",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.SamePVZ != nil {
		// no validation rules for SamePVZ
	}

	if m.Cursor != nil {

		if l := utf8.RuneCountInString(m.GetCursor()); l < 1 || l > 36 {
			err := GetOrdersRequestValidationError{
				field:  "Cursor",
				reason: "value length must be between 1 and 36 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Limit != nil {

		if m.GetLimit() < 0 {
			err := GetOrdersRequestValidationError{
				field:  "Limit",
				reason: "value must be greater than or equal to 0",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return GetOrdersRequestMultiError(errors)
	}

	return nil
}

// GetOrdersRequestMultiError is an error wrapping multiple validation errors
// returned by GetOrdersRequest.ValidateAll() if the designated constraints
// aren't met.
type GetOrdersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrdersRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrdersRequestMultiError) AllErrors() []error { return m }

// GetOrdersRequestValidationError is the validation error returned by
// GetOrdersRequest.Validate if the designated constraints aren't met.
type GetOrdersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrdersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrdersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrdersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrdersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrdersRequestValidationError) ErrorName() string { return "GetOrdersRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetOrdersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrdersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrdersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrdersRequestValidationError{}

// Validate checks the field values on GetOrdersResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetOrdersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrdersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOrdersResponseMultiError, or nil if none found.
func (m *GetOrdersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrdersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetOrders()) < 1 {
		err := GetOrdersResponseValidationError{
			field:  "Orders",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetOrders() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetOrdersResponseValidationError{
						field:  fmt.Sprintf("Orders[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetOrdersResponseValidationError{
						field:  fmt.Sprintf("Orders[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetOrdersResponseValidationError{
					field:  fmt.Sprintf("Orders[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetOrdersResponseMultiError(errors)
	}

	return nil
}

// GetOrdersResponseMultiError is an error wrapping multiple validation errors
// returned by GetOrdersResponse.ValidateAll() if the designated constraints
// aren't met.
type GetOrdersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrdersResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrdersResponseMultiError) AllErrors() []error { return m }

// GetOrdersResponseValidationError is the validation error returned by
// GetOrdersResponse.Validate if the designated constraints aren't met.
type GetOrdersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrdersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrdersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrdersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrdersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrdersResponseValidationError) ErrorName() string {
	return "GetOrdersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetOrdersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrdersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrdersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrdersResponseValidationError{}

// Validate checks the field values on AcceptReturnRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AcceptReturnRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AcceptReturnRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AcceptReturnRequestMultiError, or nil if none found.
func (m *AcceptReturnRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AcceptReturnRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetUserId()); l < 1 || l > 36 {
		err := AcceptReturnRequestValidationError{
			field:  "UserId",
			reason: "value length must be between 1 and 36 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetOrderId()); l < 1 || l > 36 {
		err := AcceptReturnRequestValidationError{
			field:  "OrderId",
			reason: "value length must be between 1 and 36 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AcceptReturnRequestMultiError(errors)
	}

	return nil
}

// AcceptReturnRequestMultiError is an error wrapping multiple validation
// errors returned by AcceptReturnRequest.ValidateAll() if the designated
// constraints aren't met.
type AcceptReturnRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AcceptReturnRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AcceptReturnRequestMultiError) AllErrors() []error { return m }

// AcceptReturnRequestValidationError is the validation error returned by
// AcceptReturnRequest.Validate if the designated constraints aren't met.
type AcceptReturnRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AcceptReturnRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AcceptReturnRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AcceptReturnRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AcceptReturnRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AcceptReturnRequestValidationError) ErrorName() string {
	return "AcceptReturnRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AcceptReturnRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAcceptReturnRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AcceptReturnRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AcceptReturnRequestValidationError{}

// Validate checks the field values on GetReturnsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetReturnsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetReturnsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetReturnsRequestMultiError, or nil if none found.
func (m *GetReturnsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetReturnsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Page != nil {

		if m.GetPage() < 0 {
			err := GetReturnsRequestValidationError{
				field:  "Page",
				reason: "value must be greater than or equal to 0",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.PageSize != nil {

		if m.GetPageSize() < 0 {
			err := GetReturnsRequestValidationError{
				field:  "PageSize",
				reason: "value must be greater than or equal to 0",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return GetReturnsRequestMultiError(errors)
	}

	return nil
}

// GetReturnsRequestMultiError is an error wrapping multiple validation errors
// returned by GetReturnsRequest.ValidateAll() if the designated constraints
// aren't met.
type GetReturnsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetReturnsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetReturnsRequestMultiError) AllErrors() []error { return m }

// GetReturnsRequestValidationError is the validation error returned by
// GetReturnsRequest.Validate if the designated constraints aren't met.
type GetReturnsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetReturnsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetReturnsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetReturnsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetReturnsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetReturnsRequestValidationError) ErrorName() string {
	return "GetReturnsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetReturnsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetReturnsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetReturnsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetReturnsRequestValidationError{}

// Validate checks the field values on GetReturnsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetReturnsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetReturnsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetReturnsResponseMultiError, or nil if none found.
func (m *GetReturnsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetReturnsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetReturns()) < 1 {
		err := GetReturnsResponseValidationError{
			field:  "Returns",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetReturns() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetReturnsResponseValidationError{
						field:  fmt.Sprintf("Returns[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetReturnsResponseValidationError{
						field:  fmt.Sprintf("Returns[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetReturnsResponseValidationError{
					field:  fmt.Sprintf("Returns[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetReturnsResponseMultiError(errors)
	}

	return nil
}

// GetReturnsResponseMultiError is an error wrapping multiple validation errors
// returned by GetReturnsResponse.ValidateAll() if the designated constraints
// aren't met.
type GetReturnsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetReturnsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetReturnsResponseMultiError) AllErrors() []error { return m }

// GetReturnsResponseValidationError is the validation error returned by
// GetReturnsResponse.Validate if the designated constraints aren't met.
type GetReturnsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetReturnsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetReturnsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetReturnsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetReturnsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetReturnsResponseValidationError) ErrorName() string {
	return "GetReturnsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetReturnsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetReturnsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetReturnsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetReturnsResponseValidationError{}

// Validate checks the field values on PVZOrder with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PVZOrder) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PVZOrder with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PVZOrderMultiError, or nil
// if none found.
func (m *PVZOrder) ValidateAll() error {
	return m.validate(true)
}

func (m *PVZOrder) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for UserId

	// no validation rules for RecipientId

	// no validation rules for StorageTime

	// no validation rules for Cost

	// no validation rules for Weight

	// no validation rules for Packaging

	// no validation rules for AdditionalFilm

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PVZOrderValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PVZOrderValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PVZOrderValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PVZOrderValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PVZOrderValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PVZOrderValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PVZOrderMultiError(errors)
	}

	return nil
}

// PVZOrderMultiError is an error wrapping multiple validation errors returned
// by PVZOrder.ValidateAll() if the designated constraints aren't met.
type PVZOrderMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PVZOrderMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PVZOrderMultiError) AllErrors() []error { return m }

// PVZOrderValidationError is the validation error returned by
// PVZOrder.Validate if the designated constraints aren't met.
type PVZOrderValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PVZOrderValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PVZOrderValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PVZOrderValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PVZOrderValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PVZOrderValidationError) ErrorName() string { return "PVZOrderValidationError" }

// Error satisfies the builtin error interface
func (e PVZOrderValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPVZOrder.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PVZOrderValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PVZOrderValidationError{}
