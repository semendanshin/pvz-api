// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.26.1
// source: pvz-service/v1/pvz-service.proto

package pvz

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PvzService_AcceptOrderDelivery_FullMethodName = "/pvz.v1.PvzService/AcceptOrderDelivery"
	PvzService_ReturnOrderDelivery_FullMethodName = "/pvz.v1.PvzService/ReturnOrderDelivery"
	PvzService_GiveOrderToClient_FullMethodName   = "/pvz.v1.PvzService/GiveOrderToClient"
	PvzService_GetOrders_FullMethodName           = "/pvz.v1.PvzService/GetOrders"
	PvzService_AcceptReturn_FullMethodName        = "/pvz.v1.PvzService/AcceptReturn"
	PvzService_GetReturns_FullMethodName          = "/pvz.v1.PvzService/GetReturns"
)

// PvzServiceClient is the client API for PvzService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PvzServiceClient interface {
	AcceptOrderDelivery(ctx context.Context, in *AcceptOrderDeliveryRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ReturnOrderDelivery(ctx context.Context, in *ReturnOrderDeliveryRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GiveOrderToClient(ctx context.Context, in *GiveOrderToClientRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetOrders(ctx context.Context, in *GetOrdersRequest, opts ...grpc.CallOption) (*GetOrdersResponse, error)
	AcceptReturn(ctx context.Context, in *AcceptReturnRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetReturns(ctx context.Context, in *GetReturnsRequest, opts ...grpc.CallOption) (*GetReturnsResponse, error)
}

type pvzServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPvzServiceClient(cc grpc.ClientConnInterface) PvzServiceClient {
	return &pvzServiceClient{cc}
}

func (c *pvzServiceClient) AcceptOrderDelivery(ctx context.Context, in *AcceptOrderDeliveryRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, PvzService_AcceptOrderDelivery_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pvzServiceClient) ReturnOrderDelivery(ctx context.Context, in *ReturnOrderDeliveryRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, PvzService_ReturnOrderDelivery_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pvzServiceClient) GiveOrderToClient(ctx context.Context, in *GiveOrderToClientRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, PvzService_GiveOrderToClient_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pvzServiceClient) GetOrders(ctx context.Context, in *GetOrdersRequest, opts ...grpc.CallOption) (*GetOrdersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOrdersResponse)
	err := c.cc.Invoke(ctx, PvzService_GetOrders_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pvzServiceClient) AcceptReturn(ctx context.Context, in *AcceptReturnRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, PvzService_AcceptReturn_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pvzServiceClient) GetReturns(ctx context.Context, in *GetReturnsRequest, opts ...grpc.CallOption) (*GetReturnsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetReturnsResponse)
	err := c.cc.Invoke(ctx, PvzService_GetReturns_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PvzServiceServer is the server API for PvzService service.
// All implementations must embed UnimplementedPvzServiceServer
// for forward compatibility.
type PvzServiceServer interface {
	AcceptOrderDelivery(context.Context, *AcceptOrderDeliveryRequest) (*emptypb.Empty, error)
	ReturnOrderDelivery(context.Context, *ReturnOrderDeliveryRequest) (*emptypb.Empty, error)
	GiveOrderToClient(context.Context, *GiveOrderToClientRequest) (*emptypb.Empty, error)
	GetOrders(context.Context, *GetOrdersRequest) (*GetOrdersResponse, error)
	AcceptReturn(context.Context, *AcceptReturnRequest) (*emptypb.Empty, error)
	GetReturns(context.Context, *GetReturnsRequest) (*GetReturnsResponse, error)
	mustEmbedUnimplementedPvzServiceServer()
}

// UnimplementedPvzServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPvzServiceServer struct{}

func (UnimplementedPvzServiceServer) AcceptOrderDelivery(context.Context, *AcceptOrderDeliveryRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptOrderDelivery not implemented")
}
func (UnimplementedPvzServiceServer) ReturnOrderDelivery(context.Context, *ReturnOrderDeliveryRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReturnOrderDelivery not implemented")
}
func (UnimplementedPvzServiceServer) GiveOrderToClient(context.Context, *GiveOrderToClientRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GiveOrderToClient not implemented")
}
func (UnimplementedPvzServiceServer) GetOrders(context.Context, *GetOrdersRequest) (*GetOrdersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrders not implemented")
}
func (UnimplementedPvzServiceServer) AcceptReturn(context.Context, *AcceptReturnRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptReturn not implemented")
}
func (UnimplementedPvzServiceServer) GetReturns(context.Context, *GetReturnsRequest) (*GetReturnsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReturns not implemented")
}
func (UnimplementedPvzServiceServer) mustEmbedUnimplementedPvzServiceServer() {}
func (UnimplementedPvzServiceServer) testEmbeddedByValue()                    {}

// UnsafePvzServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PvzServiceServer will
// result in compilation errors.
type UnsafePvzServiceServer interface {
	mustEmbedUnimplementedPvzServiceServer()
}

func RegisterPvzServiceServer(s grpc.ServiceRegistrar, srv PvzServiceServer) {
	// If the following call pancis, it indicates UnimplementedPvzServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PvzService_ServiceDesc, srv)
}

func _PvzService_AcceptOrderDelivery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcceptOrderDeliveryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PvzServiceServer).AcceptOrderDelivery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PvzService_AcceptOrderDelivery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PvzServiceServer).AcceptOrderDelivery(ctx, req.(*AcceptOrderDeliveryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PvzService_ReturnOrderDelivery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReturnOrderDeliveryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PvzServiceServer).ReturnOrderDelivery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PvzService_ReturnOrderDelivery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PvzServiceServer).ReturnOrderDelivery(ctx, req.(*ReturnOrderDeliveryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PvzService_GiveOrderToClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GiveOrderToClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PvzServiceServer).GiveOrderToClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PvzService_GiveOrderToClient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PvzServiceServer).GiveOrderToClient(ctx, req.(*GiveOrderToClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PvzService_GetOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PvzServiceServer).GetOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PvzService_GetOrders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PvzServiceServer).GetOrders(ctx, req.(*GetOrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PvzService_AcceptReturn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcceptReturnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PvzServiceServer).AcceptReturn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PvzService_AcceptReturn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PvzServiceServer).AcceptReturn(ctx, req.(*AcceptReturnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PvzService_GetReturns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReturnsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PvzServiceServer).GetReturns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PvzService_GetReturns_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PvzServiceServer).GetReturns(ctx, req.(*GetReturnsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PvzService_ServiceDesc is the grpc.ServiceDesc for PvzService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PvzService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pvz.v1.PvzService",
	HandlerType: (*PvzServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AcceptOrderDelivery",
			Handler:    _PvzService_AcceptOrderDelivery_Handler,
		},
		{
			MethodName: "ReturnOrderDelivery",
			Handler:    _PvzService_ReturnOrderDelivery_Handler,
		},
		{
			MethodName: "GiveOrderToClient",
			Handler:    _PvzService_GiveOrderToClient_Handler,
		},
		{
			MethodName: "GetOrders",
			Handler:    _PvzService_GetOrders_Handler,
		},
		{
			MethodName: "AcceptReturn",
			Handler:    _PvzService_AcceptReturn_Handler,
		},
		{
			MethodName: "GetReturns",
			Handler:    _PvzService_GetReturns_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pvz-service/v1/pvz-service.proto",
}
