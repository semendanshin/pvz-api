// Code generated by http://github.com/gojuno/minimock (v3.4.7). DO NOT EDIT.

package mocks

import (
	"context"
	"homework/internal/domain"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	_ "github.com/gojuno/minimock/v3"
)

// QueueProducerMock implements mm_usecases.QueueProducer
type QueueProducerMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcSendEvent          func(ctx context.Context, event domain.Event) (err error)
	funcSendEventOrigin    string
	inspectFuncSendEvent   func(ctx context.Context, event domain.Event)
	afterSendEventCounter  uint64
	beforeSendEventCounter uint64
	SendEventMock          mQueueProducerMockSendEvent
}

// NewQueueProducerMock returns a mock for mm_usecases.QueueProducer
func NewQueueProducerMock(t minimock.Tester) *QueueProducerMock {
	m := &QueueProducerMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.SendEventMock = mQueueProducerMockSendEvent{mock: m}
	m.SendEventMock.callArgs = []*QueueProducerMockSendEventParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mQueueProducerMockSendEvent struct {
	optional           bool
	mock               *QueueProducerMock
	defaultExpectation *QueueProducerMockSendEventExpectation
	expectations       []*QueueProducerMockSendEventExpectation

	callArgs []*QueueProducerMockSendEventParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// QueueProducerMockSendEventExpectation specifies expectation struct of the QueueProducer.SendEvent
type QueueProducerMockSendEventExpectation struct {
	mock               *QueueProducerMock
	params             *QueueProducerMockSendEventParams
	paramPtrs          *QueueProducerMockSendEventParamPtrs
	expectationOrigins QueueProducerMockSendEventExpectationOrigins
	results            *QueueProducerMockSendEventResults
	returnOrigin       string
	Counter            uint64
}

// QueueProducerMockSendEventParams contains parameters of the QueueProducer.SendEvent
type QueueProducerMockSendEventParams struct {
	ctx   context.Context
	event domain.Event
}

// QueueProducerMockSendEventParamPtrs contains pointers to parameters of the QueueProducer.SendEvent
type QueueProducerMockSendEventParamPtrs struct {
	ctx   *context.Context
	event *domain.Event
}

// QueueProducerMockSendEventResults contains results of the QueueProducer.SendEvent
type QueueProducerMockSendEventResults struct {
	err error
}

// QueueProducerMockSendEventOrigins contains origins of expectations of the QueueProducer.SendEvent
type QueueProducerMockSendEventExpectationOrigins struct {
	origin      string
	originCtx   string
	originEvent string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmSendEvent *mQueueProducerMockSendEvent) Optional() *mQueueProducerMockSendEvent {
	mmSendEvent.optional = true
	return mmSendEvent
}

// Expect sets up expected params for QueueProducer.SendEvent
func (mmSendEvent *mQueueProducerMockSendEvent) Expect(ctx context.Context, event domain.Event) *mQueueProducerMockSendEvent {
	if mmSendEvent.mock.funcSendEvent != nil {
		mmSendEvent.mock.t.Fatalf("QueueProducerMock.SendEvent mock is already set by Set")
	}

	if mmSendEvent.defaultExpectation == nil {
		mmSendEvent.defaultExpectation = &QueueProducerMockSendEventExpectation{}
	}

	if mmSendEvent.defaultExpectation.paramPtrs != nil {
		mmSendEvent.mock.t.Fatalf("QueueProducerMock.SendEvent mock is already set by ExpectParams functions")
	}

	mmSendEvent.defaultExpectation.params = &QueueProducerMockSendEventParams{ctx, event}
	mmSendEvent.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmSendEvent.expectations {
		if minimock.Equal(e.params, mmSendEvent.defaultExpectation.params) {
			mmSendEvent.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmSendEvent.defaultExpectation.params)
		}
	}

	return mmSendEvent
}

// ExpectCtxParam1 sets up expected param ctx for QueueProducer.SendEvent
func (mmSendEvent *mQueueProducerMockSendEvent) ExpectCtxParam1(ctx context.Context) *mQueueProducerMockSendEvent {
	if mmSendEvent.mock.funcSendEvent != nil {
		mmSendEvent.mock.t.Fatalf("QueueProducerMock.SendEvent mock is already set by Set")
	}

	if mmSendEvent.defaultExpectation == nil {
		mmSendEvent.defaultExpectation = &QueueProducerMockSendEventExpectation{}
	}

	if mmSendEvent.defaultExpectation.params != nil {
		mmSendEvent.mock.t.Fatalf("QueueProducerMock.SendEvent mock is already set by Expect")
	}

	if mmSendEvent.defaultExpectation.paramPtrs == nil {
		mmSendEvent.defaultExpectation.paramPtrs = &QueueProducerMockSendEventParamPtrs{}
	}
	mmSendEvent.defaultExpectation.paramPtrs.ctx = &ctx
	mmSendEvent.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmSendEvent
}

// ExpectEventParam2 sets up expected param event for QueueProducer.SendEvent
func (mmSendEvent *mQueueProducerMockSendEvent) ExpectEventParam2(event domain.Event) *mQueueProducerMockSendEvent {
	if mmSendEvent.mock.funcSendEvent != nil {
		mmSendEvent.mock.t.Fatalf("QueueProducerMock.SendEvent mock is already set by Set")
	}

	if mmSendEvent.defaultExpectation == nil {
		mmSendEvent.defaultExpectation = &QueueProducerMockSendEventExpectation{}
	}

	if mmSendEvent.defaultExpectation.params != nil {
		mmSendEvent.mock.t.Fatalf("QueueProducerMock.SendEvent mock is already set by Expect")
	}

	if mmSendEvent.defaultExpectation.paramPtrs == nil {
		mmSendEvent.defaultExpectation.paramPtrs = &QueueProducerMockSendEventParamPtrs{}
	}
	mmSendEvent.defaultExpectation.paramPtrs.event = &event
	mmSendEvent.defaultExpectation.expectationOrigins.originEvent = minimock.CallerInfo(1)

	return mmSendEvent
}

// Inspect accepts an inspector function that has same arguments as the QueueProducer.SendEvent
func (mmSendEvent *mQueueProducerMockSendEvent) Inspect(f func(ctx context.Context, event domain.Event)) *mQueueProducerMockSendEvent {
	if mmSendEvent.mock.inspectFuncSendEvent != nil {
		mmSendEvent.mock.t.Fatalf("Inspect function is already set for QueueProducerMock.SendEvent")
	}

	mmSendEvent.mock.inspectFuncSendEvent = f

	return mmSendEvent
}

// Return sets up results that will be returned by QueueProducer.SendEvent
func (mmSendEvent *mQueueProducerMockSendEvent) Return(err error) *QueueProducerMock {
	if mmSendEvent.mock.funcSendEvent != nil {
		mmSendEvent.mock.t.Fatalf("QueueProducerMock.SendEvent mock is already set by Set")
	}

	if mmSendEvent.defaultExpectation == nil {
		mmSendEvent.defaultExpectation = &QueueProducerMockSendEventExpectation{mock: mmSendEvent.mock}
	}
	mmSendEvent.defaultExpectation.results = &QueueProducerMockSendEventResults{err}
	mmSendEvent.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmSendEvent.mock
}

// Set uses given function f to mock the QueueProducer.SendEvent method
func (mmSendEvent *mQueueProducerMockSendEvent) Set(f func(ctx context.Context, event domain.Event) (err error)) *QueueProducerMock {
	if mmSendEvent.defaultExpectation != nil {
		mmSendEvent.mock.t.Fatalf("Default expectation is already set for the QueueProducer.SendEvent method")
	}

	if len(mmSendEvent.expectations) > 0 {
		mmSendEvent.mock.t.Fatalf("Some expectations are already set for the QueueProducer.SendEvent method")
	}

	mmSendEvent.mock.funcSendEvent = f
	mmSendEvent.mock.funcSendEventOrigin = minimock.CallerInfo(1)
	return mmSendEvent.mock
}

// When sets expectation for the QueueProducer.SendEvent which will trigger the result defined by the following
// Then helper
func (mmSendEvent *mQueueProducerMockSendEvent) When(ctx context.Context, event domain.Event) *QueueProducerMockSendEventExpectation {
	if mmSendEvent.mock.funcSendEvent != nil {
		mmSendEvent.mock.t.Fatalf("QueueProducerMock.SendEvent mock is already set by Set")
	}

	expectation := &QueueProducerMockSendEventExpectation{
		mock:               mmSendEvent.mock,
		params:             &QueueProducerMockSendEventParams{ctx, event},
		expectationOrigins: QueueProducerMockSendEventExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmSendEvent.expectations = append(mmSendEvent.expectations, expectation)
	return expectation
}

// Then sets up QueueProducer.SendEvent return parameters for the expectation previously defined by the When method
func (e *QueueProducerMockSendEventExpectation) Then(err error) *QueueProducerMock {
	e.results = &QueueProducerMockSendEventResults{err}
	return e.mock
}

// Times sets number of times QueueProducer.SendEvent should be invoked
func (mmSendEvent *mQueueProducerMockSendEvent) Times(n uint64) *mQueueProducerMockSendEvent {
	if n == 0 {
		mmSendEvent.mock.t.Fatalf("Times of QueueProducerMock.SendEvent mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmSendEvent.expectedInvocations, n)
	mmSendEvent.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmSendEvent
}

func (mmSendEvent *mQueueProducerMockSendEvent) invocationsDone() bool {
	if len(mmSendEvent.expectations) == 0 && mmSendEvent.defaultExpectation == nil && mmSendEvent.mock.funcSendEvent == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmSendEvent.mock.afterSendEventCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmSendEvent.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// SendEvent implements mm_usecases.QueueProducer
func (mmSendEvent *QueueProducerMock) SendEvent(ctx context.Context, event domain.Event) (err error) {
	mm_atomic.AddUint64(&mmSendEvent.beforeSendEventCounter, 1)
	defer mm_atomic.AddUint64(&mmSendEvent.afterSendEventCounter, 1)

	mmSendEvent.t.Helper()

	if mmSendEvent.inspectFuncSendEvent != nil {
		mmSendEvent.inspectFuncSendEvent(ctx, event)
	}

	mm_params := QueueProducerMockSendEventParams{ctx, event}

	// Record call args
	mmSendEvent.SendEventMock.mutex.Lock()
	mmSendEvent.SendEventMock.callArgs = append(mmSendEvent.SendEventMock.callArgs, &mm_params)
	mmSendEvent.SendEventMock.mutex.Unlock()

	for _, e := range mmSendEvent.SendEventMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmSendEvent.SendEventMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmSendEvent.SendEventMock.defaultExpectation.Counter, 1)
		mm_want := mmSendEvent.SendEventMock.defaultExpectation.params
		mm_want_ptrs := mmSendEvent.SendEventMock.defaultExpectation.paramPtrs

		mm_got := QueueProducerMockSendEventParams{ctx, event}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmSendEvent.t.Errorf("QueueProducerMock.SendEvent got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmSendEvent.SendEventMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.event != nil && !minimock.Equal(*mm_want_ptrs.event, mm_got.event) {
				mmSendEvent.t.Errorf("QueueProducerMock.SendEvent got unexpected parameter event, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmSendEvent.SendEventMock.defaultExpectation.expectationOrigins.originEvent, *mm_want_ptrs.event, mm_got.event, minimock.Diff(*mm_want_ptrs.event, mm_got.event))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmSendEvent.t.Errorf("QueueProducerMock.SendEvent got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmSendEvent.SendEventMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmSendEvent.SendEventMock.defaultExpectation.results
		if mm_results == nil {
			mmSendEvent.t.Fatal("No results are set for the QueueProducerMock.SendEvent")
		}
		return (*mm_results).err
	}
	if mmSendEvent.funcSendEvent != nil {
		return mmSendEvent.funcSendEvent(ctx, event)
	}
	mmSendEvent.t.Fatalf("Unexpected call to QueueProducerMock.SendEvent. %v %v", ctx, event)
	return
}

// SendEventAfterCounter returns a count of finished QueueProducerMock.SendEvent invocations
func (mmSendEvent *QueueProducerMock) SendEventAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSendEvent.afterSendEventCounter)
}

// SendEventBeforeCounter returns a count of QueueProducerMock.SendEvent invocations
func (mmSendEvent *QueueProducerMock) SendEventBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSendEvent.beforeSendEventCounter)
}

// Calls returns a list of arguments used in each call to QueueProducerMock.SendEvent.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmSendEvent *mQueueProducerMockSendEvent) Calls() []*QueueProducerMockSendEventParams {
	mmSendEvent.mutex.RLock()

	argCopy := make([]*QueueProducerMockSendEventParams, len(mmSendEvent.callArgs))
	copy(argCopy, mmSendEvent.callArgs)

	mmSendEvent.mutex.RUnlock()

	return argCopy
}

// MinimockSendEventDone returns true if the count of the SendEvent invocations corresponds
// the number of defined expectations
func (m *QueueProducerMock) MinimockSendEventDone() bool {
	if m.SendEventMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.SendEventMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.SendEventMock.invocationsDone()
}

// MinimockSendEventInspect logs each unmet expectation
func (m *QueueProducerMock) MinimockSendEventInspect() {
	for _, e := range m.SendEventMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to QueueProducerMock.SendEvent at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterSendEventCounter := mm_atomic.LoadUint64(&m.afterSendEventCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.SendEventMock.defaultExpectation != nil && afterSendEventCounter < 1 {
		if m.SendEventMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to QueueProducerMock.SendEvent at\n%s", m.SendEventMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to QueueProducerMock.SendEvent at\n%s with params: %#v", m.SendEventMock.defaultExpectation.expectationOrigins.origin, *m.SendEventMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSendEvent != nil && afterSendEventCounter < 1 {
		m.t.Errorf("Expected call to QueueProducerMock.SendEvent at\n%s", m.funcSendEventOrigin)
	}

	if !m.SendEventMock.invocationsDone() && afterSendEventCounter > 0 {
		m.t.Errorf("Expected %d calls to QueueProducerMock.SendEvent at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.SendEventMock.expectedInvocations), m.SendEventMock.expectedInvocationsOrigin, afterSendEventCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *QueueProducerMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockSendEventInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *QueueProducerMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *QueueProducerMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockSendEventDone()
}
