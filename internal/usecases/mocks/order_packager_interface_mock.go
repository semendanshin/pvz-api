// Code generated by http://github.com/gojuno/minimock (v3.4.0). DO NOT EDIT.

package mocks

import (
	"homework/internal/domain"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// OrderPackagerInterfaceMock implements mm_usecases.OrderPackagerInterface
type OrderPackagerInterfaceMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcPackageOrder          func(order domain.PVZOrder, packagingType domain.PackagingType) (p1 domain.PVZOrder, err error)
	funcPackageOrderOrigin    string
	inspectFuncPackageOrder   func(order domain.PVZOrder, packagingType domain.PackagingType)
	afterPackageOrderCounter  uint64
	beforePackageOrderCounter uint64
	PackageOrderMock          mOrderPackagerInterfaceMockPackageOrder
}

// NewOrderPackagerInterfaceMock returns a mock for mm_usecases.OrderPackagerInterface
func NewOrderPackagerInterfaceMock(t minimock.Tester) *OrderPackagerInterfaceMock {
	m := &OrderPackagerInterfaceMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.PackageOrderMock = mOrderPackagerInterfaceMockPackageOrder{mock: m}
	m.PackageOrderMock.callArgs = []*OrderPackagerInterfaceMockPackageOrderParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mOrderPackagerInterfaceMockPackageOrder struct {
	optional           bool
	mock               *OrderPackagerInterfaceMock
	defaultExpectation *OrderPackagerInterfaceMockPackageOrderExpectation
	expectations       []*OrderPackagerInterfaceMockPackageOrderExpectation

	callArgs []*OrderPackagerInterfaceMockPackageOrderParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// OrderPackagerInterfaceMockPackageOrderExpectation specifies expectation struct of the OrderPackagerInterface.PackageOrder
type OrderPackagerInterfaceMockPackageOrderExpectation struct {
	mock               *OrderPackagerInterfaceMock
	params             *OrderPackagerInterfaceMockPackageOrderParams
	paramPtrs          *OrderPackagerInterfaceMockPackageOrderParamPtrs
	expectationOrigins OrderPackagerInterfaceMockPackageOrderExpectationOrigins
	results            *OrderPackagerInterfaceMockPackageOrderResults
	returnOrigin       string
	Counter            uint64
}

// OrderPackagerInterfaceMockPackageOrderParams contains parameters of the OrderPackagerInterface.PackageOrder
type OrderPackagerInterfaceMockPackageOrderParams struct {
	order         domain.PVZOrder
	packagingType domain.PackagingType
}

// OrderPackagerInterfaceMockPackageOrderParamPtrs contains pointers to parameters of the OrderPackagerInterface.PackageOrder
type OrderPackagerInterfaceMockPackageOrderParamPtrs struct {
	order         *domain.PVZOrder
	packagingType *domain.PackagingType
}

// OrderPackagerInterfaceMockPackageOrderResults contains results of the OrderPackagerInterface.PackageOrder
type OrderPackagerInterfaceMockPackageOrderResults struct {
	p1  domain.PVZOrder
	err error
}

// OrderPackagerInterfaceMockPackageOrderOrigins contains origins of expectations of the OrderPackagerInterface.PackageOrder
type OrderPackagerInterfaceMockPackageOrderExpectationOrigins struct {
	origin              string
	originOrder         string
	originPackagingType string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmPackageOrder *mOrderPackagerInterfaceMockPackageOrder) Optional() *mOrderPackagerInterfaceMockPackageOrder {
	mmPackageOrder.optional = true
	return mmPackageOrder
}

// Expect sets up expected params for OrderPackagerInterface.PackageOrder
func (mmPackageOrder *mOrderPackagerInterfaceMockPackageOrder) Expect(order domain.PVZOrder, packagingType domain.PackagingType) *mOrderPackagerInterfaceMockPackageOrder {
	if mmPackageOrder.mock.funcPackageOrder != nil {
		mmPackageOrder.mock.t.Fatalf("OrderPackagerInterfaceMock.PackageOrder mock is already set by Set")
	}

	if mmPackageOrder.defaultExpectation == nil {
		mmPackageOrder.defaultExpectation = &OrderPackagerInterfaceMockPackageOrderExpectation{}
	}

	if mmPackageOrder.defaultExpectation.paramPtrs != nil {
		mmPackageOrder.mock.t.Fatalf("OrderPackagerInterfaceMock.PackageOrder mock is already set by ExpectParams functions")
	}

	mmPackageOrder.defaultExpectation.params = &OrderPackagerInterfaceMockPackageOrderParams{order, packagingType}
	mmPackageOrder.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmPackageOrder.expectations {
		if minimock.Equal(e.params, mmPackageOrder.defaultExpectation.params) {
			mmPackageOrder.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmPackageOrder.defaultExpectation.params)
		}
	}

	return mmPackageOrder
}

// ExpectOrderParam1 sets up expected param order for OrderPackagerInterface.PackageOrder
func (mmPackageOrder *mOrderPackagerInterfaceMockPackageOrder) ExpectOrderParam1(order domain.PVZOrder) *mOrderPackagerInterfaceMockPackageOrder {
	if mmPackageOrder.mock.funcPackageOrder != nil {
		mmPackageOrder.mock.t.Fatalf("OrderPackagerInterfaceMock.PackageOrder mock is already set by Set")
	}

	if mmPackageOrder.defaultExpectation == nil {
		mmPackageOrder.defaultExpectation = &OrderPackagerInterfaceMockPackageOrderExpectation{}
	}

	if mmPackageOrder.defaultExpectation.params != nil {
		mmPackageOrder.mock.t.Fatalf("OrderPackagerInterfaceMock.PackageOrder mock is already set by Expect")
	}

	if mmPackageOrder.defaultExpectation.paramPtrs == nil {
		mmPackageOrder.defaultExpectation.paramPtrs = &OrderPackagerInterfaceMockPackageOrderParamPtrs{}
	}
	mmPackageOrder.defaultExpectation.paramPtrs.order = &order
	mmPackageOrder.defaultExpectation.expectationOrigins.originOrder = minimock.CallerInfo(1)

	return mmPackageOrder
}

// ExpectPackagingTypeParam2 sets up expected param packagingType for OrderPackagerInterface.PackageOrder
func (mmPackageOrder *mOrderPackagerInterfaceMockPackageOrder) ExpectPackagingTypeParam2(packagingType domain.PackagingType) *mOrderPackagerInterfaceMockPackageOrder {
	if mmPackageOrder.mock.funcPackageOrder != nil {
		mmPackageOrder.mock.t.Fatalf("OrderPackagerInterfaceMock.PackageOrder mock is already set by Set")
	}

	if mmPackageOrder.defaultExpectation == nil {
		mmPackageOrder.defaultExpectation = &OrderPackagerInterfaceMockPackageOrderExpectation{}
	}

	if mmPackageOrder.defaultExpectation.params != nil {
		mmPackageOrder.mock.t.Fatalf("OrderPackagerInterfaceMock.PackageOrder mock is already set by Expect")
	}

	if mmPackageOrder.defaultExpectation.paramPtrs == nil {
		mmPackageOrder.defaultExpectation.paramPtrs = &OrderPackagerInterfaceMockPackageOrderParamPtrs{}
	}
	mmPackageOrder.defaultExpectation.paramPtrs.packagingType = &packagingType
	mmPackageOrder.defaultExpectation.expectationOrigins.originPackagingType = minimock.CallerInfo(1)

	return mmPackageOrder
}

// Inspect accepts an inspector function that has same arguments as the OrderPackagerInterface.PackageOrder
func (mmPackageOrder *mOrderPackagerInterfaceMockPackageOrder) Inspect(f func(order domain.PVZOrder, packagingType domain.PackagingType)) *mOrderPackagerInterfaceMockPackageOrder {
	if mmPackageOrder.mock.inspectFuncPackageOrder != nil {
		mmPackageOrder.mock.t.Fatalf("Inspect function is already set for OrderPackagerInterfaceMock.PackageOrder")
	}

	mmPackageOrder.mock.inspectFuncPackageOrder = f

	return mmPackageOrder
}

// Return sets up results that will be returned by OrderPackagerInterface.PackageOrder
func (mmPackageOrder *mOrderPackagerInterfaceMockPackageOrder) Return(p1 domain.PVZOrder, err error) *OrderPackagerInterfaceMock {
	if mmPackageOrder.mock.funcPackageOrder != nil {
		mmPackageOrder.mock.t.Fatalf("OrderPackagerInterfaceMock.PackageOrder mock is already set by Set")
	}

	if mmPackageOrder.defaultExpectation == nil {
		mmPackageOrder.defaultExpectation = &OrderPackagerInterfaceMockPackageOrderExpectation{mock: mmPackageOrder.mock}
	}
	mmPackageOrder.defaultExpectation.results = &OrderPackagerInterfaceMockPackageOrderResults{p1, err}
	mmPackageOrder.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmPackageOrder.mock
}

// Set uses given function f to mock the OrderPackagerInterface.PackageOrder method
func (mmPackageOrder *mOrderPackagerInterfaceMockPackageOrder) Set(f func(order domain.PVZOrder, packagingType domain.PackagingType) (p1 domain.PVZOrder, err error)) *OrderPackagerInterfaceMock {
	if mmPackageOrder.defaultExpectation != nil {
		mmPackageOrder.mock.t.Fatalf("Default expectation is already set for the OrderPackagerInterface.PackageOrder method")
	}

	if len(mmPackageOrder.expectations) > 0 {
		mmPackageOrder.mock.t.Fatalf("Some expectations are already set for the OrderPackagerInterface.PackageOrder method")
	}

	mmPackageOrder.mock.funcPackageOrder = f
	mmPackageOrder.mock.funcPackageOrderOrigin = minimock.CallerInfo(1)
	return mmPackageOrder.mock
}

// When sets expectation for the OrderPackagerInterface.PackageOrder which will trigger the result defined by the following
// Then helper
func (mmPackageOrder *mOrderPackagerInterfaceMockPackageOrder) When(order domain.PVZOrder, packagingType domain.PackagingType) *OrderPackagerInterfaceMockPackageOrderExpectation {
	if mmPackageOrder.mock.funcPackageOrder != nil {
		mmPackageOrder.mock.t.Fatalf("OrderPackagerInterfaceMock.PackageOrder mock is already set by Set")
	}

	expectation := &OrderPackagerInterfaceMockPackageOrderExpectation{
		mock:               mmPackageOrder.mock,
		params:             &OrderPackagerInterfaceMockPackageOrderParams{order, packagingType},
		expectationOrigins: OrderPackagerInterfaceMockPackageOrderExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmPackageOrder.expectations = append(mmPackageOrder.expectations, expectation)
	return expectation
}

// Then sets up OrderPackagerInterface.PackageOrder return parameters for the expectation previously defined by the When method
func (e *OrderPackagerInterfaceMockPackageOrderExpectation) Then(p1 domain.PVZOrder, err error) *OrderPackagerInterfaceMock {
	e.results = &OrderPackagerInterfaceMockPackageOrderResults{p1, err}
	return e.mock
}

// Times sets number of times OrderPackagerInterface.PackageOrder should be invoked
func (mmPackageOrder *mOrderPackagerInterfaceMockPackageOrder) Times(n uint64) *mOrderPackagerInterfaceMockPackageOrder {
	if n == 0 {
		mmPackageOrder.mock.t.Fatalf("Times of OrderPackagerInterfaceMock.PackageOrder mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmPackageOrder.expectedInvocations, n)
	mmPackageOrder.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmPackageOrder
}

func (mmPackageOrder *mOrderPackagerInterfaceMockPackageOrder) invocationsDone() bool {
	if len(mmPackageOrder.expectations) == 0 && mmPackageOrder.defaultExpectation == nil && mmPackageOrder.mock.funcPackageOrder == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmPackageOrder.mock.afterPackageOrderCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmPackageOrder.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// PackageOrder implements mm_usecases.OrderPackagerInterface
func (mmPackageOrder *OrderPackagerInterfaceMock) PackageOrder(order domain.PVZOrder, packagingType domain.PackagingType) (p1 domain.PVZOrder, err error) {
	mm_atomic.AddUint64(&mmPackageOrder.beforePackageOrderCounter, 1)
	defer mm_atomic.AddUint64(&mmPackageOrder.afterPackageOrderCounter, 1)

	mmPackageOrder.t.Helper()

	if mmPackageOrder.inspectFuncPackageOrder != nil {
		mmPackageOrder.inspectFuncPackageOrder(order, packagingType)
	}

	mm_params := OrderPackagerInterfaceMockPackageOrderParams{order, packagingType}

	// Record call args
	mmPackageOrder.PackageOrderMock.mutex.Lock()
	mmPackageOrder.PackageOrderMock.callArgs = append(mmPackageOrder.PackageOrderMock.callArgs, &mm_params)
	mmPackageOrder.PackageOrderMock.mutex.Unlock()

	for _, e := range mmPackageOrder.PackageOrderMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.p1, e.results.err
		}
	}

	if mmPackageOrder.PackageOrderMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmPackageOrder.PackageOrderMock.defaultExpectation.Counter, 1)
		mm_want := mmPackageOrder.PackageOrderMock.defaultExpectation.params
		mm_want_ptrs := mmPackageOrder.PackageOrderMock.defaultExpectation.paramPtrs

		mm_got := OrderPackagerInterfaceMockPackageOrderParams{order, packagingType}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.order != nil && !minimock.Equal(*mm_want_ptrs.order, mm_got.order) {
				mmPackageOrder.t.Errorf("OrderPackagerInterfaceMock.PackageOrder got unexpected parameter order, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmPackageOrder.PackageOrderMock.defaultExpectation.expectationOrigins.originOrder, *mm_want_ptrs.order, mm_got.order, minimock.Diff(*mm_want_ptrs.order, mm_got.order))
			}

			if mm_want_ptrs.packagingType != nil && !minimock.Equal(*mm_want_ptrs.packagingType, mm_got.packagingType) {
				mmPackageOrder.t.Errorf("OrderPackagerInterfaceMock.PackageOrder got unexpected parameter packagingType, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmPackageOrder.PackageOrderMock.defaultExpectation.expectationOrigins.originPackagingType, *mm_want_ptrs.packagingType, mm_got.packagingType, minimock.Diff(*mm_want_ptrs.packagingType, mm_got.packagingType))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmPackageOrder.t.Errorf("OrderPackagerInterfaceMock.PackageOrder got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmPackageOrder.PackageOrderMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmPackageOrder.PackageOrderMock.defaultExpectation.results
		if mm_results == nil {
			mmPackageOrder.t.Fatal("No results are set for the OrderPackagerInterfaceMock.PackageOrder")
		}
		return (*mm_results).p1, (*mm_results).err
	}
	if mmPackageOrder.funcPackageOrder != nil {
		return mmPackageOrder.funcPackageOrder(order, packagingType)
	}
	mmPackageOrder.t.Fatalf("Unexpected call to OrderPackagerInterfaceMock.PackageOrder. %v %v", order, packagingType)
	return
}

// PackageOrderAfterCounter returns a count of finished OrderPackagerInterfaceMock.PackageOrder invocations
func (mmPackageOrder *OrderPackagerInterfaceMock) PackageOrderAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmPackageOrder.afterPackageOrderCounter)
}

// PackageOrderBeforeCounter returns a count of OrderPackagerInterfaceMock.PackageOrder invocations
func (mmPackageOrder *OrderPackagerInterfaceMock) PackageOrderBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmPackageOrder.beforePackageOrderCounter)
}

// Calls returns a list of arguments used in each call to OrderPackagerInterfaceMock.PackageOrder.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmPackageOrder *mOrderPackagerInterfaceMockPackageOrder) Calls() []*OrderPackagerInterfaceMockPackageOrderParams {
	mmPackageOrder.mutex.RLock()

	argCopy := make([]*OrderPackagerInterfaceMockPackageOrderParams, len(mmPackageOrder.callArgs))
	copy(argCopy, mmPackageOrder.callArgs)

	mmPackageOrder.mutex.RUnlock()

	return argCopy
}

// MinimockPackageOrderDone returns true if the count of the PackageOrder invocations corresponds
// the number of defined expectations
func (m *OrderPackagerInterfaceMock) MinimockPackageOrderDone() bool {
	if m.PackageOrderMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.PackageOrderMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.PackageOrderMock.invocationsDone()
}

// MinimockPackageOrderInspect logs each unmet expectation
func (m *OrderPackagerInterfaceMock) MinimockPackageOrderInspect() {
	for _, e := range m.PackageOrderMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to OrderPackagerInterfaceMock.PackageOrder at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterPackageOrderCounter := mm_atomic.LoadUint64(&m.afterPackageOrderCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.PackageOrderMock.defaultExpectation != nil && afterPackageOrderCounter < 1 {
		if m.PackageOrderMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to OrderPackagerInterfaceMock.PackageOrder at\n%s", m.PackageOrderMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to OrderPackagerInterfaceMock.PackageOrder at\n%s with params: %#v", m.PackageOrderMock.defaultExpectation.expectationOrigins.origin, *m.PackageOrderMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcPackageOrder != nil && afterPackageOrderCounter < 1 {
		m.t.Errorf("Expected call to OrderPackagerInterfaceMock.PackageOrder at\n%s", m.funcPackageOrderOrigin)
	}

	if !m.PackageOrderMock.invocationsDone() && afterPackageOrderCounter > 0 {
		m.t.Errorf("Expected %d calls to OrderPackagerInterfaceMock.PackageOrder at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.PackageOrderMock.expectedInvocations), m.PackageOrderMock.expectedInvocationsOrigin, afterPackageOrderCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *OrderPackagerInterfaceMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockPackageOrderInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *OrderPackagerInterfaceMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *OrderPackagerInterfaceMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockPackageOrderDone()
}
